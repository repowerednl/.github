name: Deploy the docker image on Kubernetes and verify the deployment

on:
  workflow_call:
    inputs:
      # Required
      container_names:
        type: string
        required: true
        description: A JSON string list of all deployments belonging to the same (docker) image
      docker_image_tag:
        type: string
        required: true
      environment:
        type: string
        required: true
      # Optional
      with_infisical_configuration:
        type: boolean
        required: false
        default: false
    secrets:
      digital_ocean_access_token:
        required: true
      infisical_client_id:
        required: false
      infisical_client_client_secret:
        required: false
      infisical_client_project_id:
        required: false

jobs:
  deploy-verify:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    strategy:
      matrix:
        container_name: ${{ fromJSON(inputs.container_names) }}
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.digital_ocean_access_token }}

      - name: Save DigitalOcean kubeconfig with short-lived credentials
        env:
          expiry-seconds: ${{ vars.KUBE_CRED_EXPIRY_SECOND || 300 }}
        run: doctl kubernetes cluster kubeconfig save  --expiry-seconds ${{ env.expiry-seconds }} ${{ vars.CLUSTER_NAME }}

      - name: Update kubernetes secrets
        if: ${{ inputs.with_infisical_configuration == true }}
        run: |
          kubectl delete secret infisical-secrets --ignore-not-found=true
          kubectl create secret generic infisical-secrets \
          --from-literal=INFISICAL_CLIENT_ID=${{ secrets.infisical_client_id }} \
          --from-literal=INFISICAL_CLIENT_SECRET=${{ secrets.infisical_client_client_secret }} \
          --from-literal=INFISICAL_PROJECT_ID=${{ secrets.infisical_client_project_id }}

      - name: Deploy ${{ matrix.container_name }}
        run: | 
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "Production deployment. Restarting the deployment with the updated 'latest' tag"
            kubectl rollout restart deployment ${{ matrix.container_name }}-deployment
          else
            echo "Non-production deployment. Updating image to ${{ inputs.docker_image_tag }} and restarting"
            kubectl set image deployment/${{ matrix.container_name }}-deployment ${{ matrix.container_name }}=${{ inputs.docker_image_tag }}
          fi

      - name: Verify ${{matrix.container_name}} deployment
        run: kubectl rollout status deployment/${{matrix.container_name}}-deployment

  deploy-summary:
    name: Deployment outcome
    needs: [ deploy-verify ]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Summary
        run: |
          if ${{ contains(needs.deploy-verify.result, 'success') }}; then
            echo "<h2>:white_check_mark: Deployment successful </h2>" >> $GITHUB_STEP_SUMMARY
          else
            echo "<h2>:x: Deployment failed </h2>" >> $GITHUB_STEP_SUMMARY
          fi
          {
            echo ""
            echo "Branch: $BRANCH"
            echo "Image tag: ${{ inputs.docker_image_tag }}"
            echo "Environment: ${{ inputs.environment }}"
            echo "By: ${{ github.actor }}"
          } >> $GITHUB_STEP_SUMMARY
        env:
          BRANCH: ${{ github.event.workflow_run.head_branch || github.ref_name }}
