name: Deploy the docker image on Kubernetes and verify the deployment

on:
  workflow_call:
    inputs:
      # Required
      docker_image_tag:
        type: string
        required: true
      environment:
        type: string
        required: true
      helm_deployment_version:
        type: string
        required: true
      # Optional
      namespace:
        type: string
        required: false
      deployment_name-values_file:
        type: string
        description: "The name for the deployment (when empty it uses the repo name) and the corresponding helm values filename (defaults to 'values.yml)"
        required: false
        default: "[{\'name\': \'\', \'file\': \'values.yml\'}]"
    secrets:
      digital_ocean_access_token:
        required: true

jobs:
  deploy-helm:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    strategy:
      matrix:
        include: ${{ fromJson(inputs.deployment_name-values_file) }}
    permissions:
      packages: read
      contents: read
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.digital_ocean_access_token }}

      - name: Save DigitalOcean kubeconfig with short-lived credentials
        env:
          expiry-seconds: ${{ vars.KUBE_CRED_EXPIRY_SECOND || 300 }}
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds ${{ env.expiry-seconds }} dev-cluster

      - name: Install Helm
        uses: azure/setup-helm@v4.3.0

      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Helm Deployment to Kubernetes
        id: helm-deployment
        env:
          name: ${{ matrix.name || github.event.repository.name }}
          version: ${{ inputs.helm_deployment_version }}
          ns: ${{ inputs.namespace || github.event.repository.name }}
        run: |
          # Get the current deployed Helm version
          HELM_VERSION=$(helm list -n ${{ env.name }} -o json | jq -r '.[0].app_version')
          echo "helm_version=$HELM_VERSION" >> $GITHUB_OUTPUT

          # Check if the deployment values have changed
          VALUES_UPDATED=false
          git diff --name-only HEAD~1 | grep -q ${{ matrix.file }} && VALUES_UPDATED=true
          echo "values_updated=$VALUES_UPDATED" >> $GITHUB_OUTPUT

          # Check if current Helm version matches the target version
          if [[ "$HELM_VERSION" == ${{ env.version }} && "$VALUES_UPDATED" == false ]]; then
            echo "Setting the new image: ${{ inputs.docker_image_tag }}"
            helm upgrade ${{ env.name }} oci://ghcr.io/repowerednl/helm-charts/deployment \
              --namespace ${{ env.ns }} --reuse-values --set image=${{ inputs.docker_image_tag }}
          else
            # Set the namespace creation flag if it's an initial deployment
            if [[ "$HELM_VERSION" == "null" ]]; then
              CREATE_NAMESPACE_COMMAND="--create-namespace"
            else
              CREATE_NAMESPACE_COMMAND=""
            fi

            # Login to repowered container registry
            echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ghcr.io -u repowerednl --password-stdin
            echo "Upgrading or installing the deployment"
            helm upgrade --install ${{ env.name }} oci://ghcr.io/repowerednl/helm-charts/deployment \
              --version ${{ env.version }} --namespace ${{ env.ns }} $CREATE_NAMESPACE_COMMAND \
              --values ${{ matrix.file }}
          fi

      - name: Helm deployment status as summary
        env:
          name: ${{ matrix.name || github.event.repository.name }}
          version: ${{ inputs.helm_deployment_version }}
          ns: ${{ inputs.namespace || github.event.repository.name }}
        run: |         
          echo "<h2> :chart: Helm Status Output </h2>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          helm status ${{ env.name }} -n ${{ env.ns }} >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Image used: ${{ inputs.docker_image_tag }} " >> $GITHUB_STEP_SUMMARY
          if [ ${{ steps.helm-deployment.outputs.helm_version }} == "null"]; then
            echo ":new: This was an initial deployment" >> $GITHUB_STEP_SUMMARY
          fi
          echo "Updated values? ${{ steps.helm-deployment.outputs.values_updated }} " >> $GITHUB_STEP_SUMMARY
          if [ ${{ steps.helm-deployment.outputs.helm_version }} != "${{ env.version }}" ]; then
            echo "New Helm version used: ${{ env.version }}" >> $GITHUB_STEP_SUMMARY
          fi
